package ${package}.manager.impl;
#set( $mapper = ${lowerClassName}+"Mapper")
#set( $Mapper = ${className}+"Mapper")
#set( $convertor = ${lowerClassName}+"Converter")
#set( $Convertor = ${className}+"Converter")
#set( $Dto = ${className}+"DTO")
#set( $addQuery = ${className}+"AddQuery")
#set( $editQuery = ${className}+"EditQuery")
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import ${package}.model.${className};
import ${package}.provider.query.${className}PageQuery;
#if($oldProject)
import ${package}.dao.$Mapper;
#else
import ${package}.mapper.$Mapper;
#end
import ${package}.manager.${className}Manager;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * $classComments
 * @author $author
 * @date $date
 */
@Component
public class ${className}ManagerImpl implements ${className}Manager {

    private final $Mapper $mapper;

    public ${className}ManagerImpl($Mapper $mapper) {
        this.$mapper = $mapper;
    }

    @Override
    public PageInfo<${className}> searchPage(${className}PageQuery pageQuery,int pageNum, int pageSize) {
        final PageInfo<${className}> pageInfo = PageHelper.startPage(pageNum, pageSize).doSelectPageInfo(() ->
        this.${mapper}.findAllByNameLike(pageQuery.getName()));
        return pageInfo;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ${className} add(${className} model) {
         this.${mapper}.insertSelective(model);
         return model;
    }
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteById(Long id) {
        this.${mapper}.deleteByPrimaryKey(id);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ${className} update(${className} model) {
        this.${mapper}.updateByPrimaryKeySelective(model);
        return model;
    }

    @Override
    public ${className} searchById(Long id) {
        final ${className} model = this.${mapper}.selectByPrimaryKey(id);
        return model;
    }

}