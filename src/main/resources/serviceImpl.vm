package ${package}.api.impl;
#set( $manager = ${lowerClassName}+"Manager")
#set( $Manager = ${className}+"Manager")
#set( $Dto = ${className}+"DTO")
#set( $addQuery = ${className}+"AddQuery")
#set( $editQuery = ${className}+"EditQuery")
#set( $Converter = ${className}+"Converter")
import com.github.pagehelper.PageInfo;
import ${package}.model.${className};
import ${package}.dto.${className}DTO;
import ${package}.query.${className}AddQuery;
import ${package}.query.${className}EditQuery;
import ${package}.query.${className}PageQuery;
import ${package}.service.${className}Service;
import ${package}.manager.${className}Manager;
import ${package}.converter.${className}Converter;
import ${package}.bo.${Bo};
import com.ikongjian.commons.entity.Result;
import com.ikongjian.commons.enums.ResultCodeEnum;
import com.ikongjian.commons.exception.CommonException;
import com.ikongjian.starter.log.annotation.SysLog;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.dubbo.config.annotation.DubboService;
import org.springframework.stereotype.Service;

/**
 * $classComments
 * @author $author
 * @date $date
 */
@Slf4j
@Service
@DubboService
public class ${className}ServiceImpl implements ${className}Service {

    private final $Manager $manager;

    public ${className}ServiceImpl($Manager $manager) {
        this.$manager = $manager;
    }

    @Override
    @SysLog("${classComments}分页查询")
    public Result<PageInfo<$Dto>> searchPage(${className}PageQuery pageQuery,int pageNum, int pageSize) {
        try {
            final ${className}BO bo = ${Convertor}.toBO(pageQuery);
            final PageInfo<${className}> pageInfo = this.${manager}.searchPage(bo,pageNum,pageSize);
            return ${Convertor}.toDTO.convertToResult(pageInfo);
        } catch (CommonException exception) {
            log.error(ExceptionUtils.getStackTrace(exception));
            return Result.fail(exception.getMessage());
        } catch (Exception e) {
            log.error(ExceptionUtils.getStackTrace(e));
            return Result.fail(ResultCodeEnum.INTERNAL_SERVER_ERROR.getCode(), ResultCodeEnum.INTERNAL_SERVER_ERROR.getMsg());
        }
    }

    @Override
    @SysLog("新增${classComments}")
    public Result<$Dto> add($addQuery addQuery) {
        try {
            final ${className}BO bo = ${Convertor}.toBO(addQuery);
            final ${className} modelN = this.${manager}.add(bo);
            return ${Convertor}.toDTO.convertToResult(modelN);
        } catch (CommonException exception) {
            log.error(ExceptionUtils.getStackTrace(exception));
            return Result.fail(exception.getMessage());
        } catch (Exception e) {
            log.error(ExceptionUtils.getStackTrace(e));
            return Result.fail(ResultCodeEnum.INTERNAL_SERVER_ERROR.getCode(), ResultCodeEnum.INTERNAL_SERVER_ERROR.getMsg());
        }
    }
    @Override
    @SysLog("删除${classComments}")
    public Result<Void> deleteById(Long id) {
        try {
            this.${manager}.deleteById(id);
            return Result.empty();
        } catch (CommonException exception) {
            log.error(ExceptionUtils.getStackTrace(exception));
            return Result.fail(exception.getMessage());
        } catch (Exception e) {
            log.error(ExceptionUtils.getStackTrace(e));
            return Result.fail(ResultCodeEnum.INTERNAL_SERVER_ERROR.getCode(), ResultCodeEnum.INTERNAL_SERVER_ERROR.getMsg());
        }
    }

    @Override
    @SysLog("修改${classComments}")
    public Result<$Dto> update($editQuery editQuery) {
        try {
            final ${className}BO bo = ${Convertor}.toBO(editQuery);
            final ${className} modelN = this.${manager}.update(bo);
            return ${Convertor}.toDTO.convertToResult(modelN);
        } catch (CommonException exception) {
            log.error(ExceptionUtils.getStackTrace(exception));
            return Result.fail(exception.getMessage());
        } catch (Exception e) {
            log.error(ExceptionUtils.getStackTrace(e));
            return Result.fail(ResultCodeEnum.INTERNAL_SERVER_ERROR.getCode(), ResultCodeEnum.INTERNAL_SERVER_ERROR.getMsg());
        }
    }

    @Override
    @SysLog("根据Id查询${classComments}")
    public Result<$Dto> searchById(Long id) {
        try {
            final ${className} model = this.${manager}.searchById(id);
            return ${Convertor}.toDTO.convertToResult(model);
        } catch (CommonException exception) {
            log.error(ExceptionUtils.getStackTrace(exception));
            return Result.fail(exception.getMessage());
        } catch (Exception e) {
            log.error(ExceptionUtils.getStackTrace(e));
            return Result.fail(ResultCodeEnum.INTERNAL_SERVER_ERROR.getCode(), ResultCodeEnum.INTERNAL_SERVER_ERROR.getMsg());
        }
    }


}